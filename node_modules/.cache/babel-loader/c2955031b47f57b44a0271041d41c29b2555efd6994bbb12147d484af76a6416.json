{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leonardo\\\\Desktop\\\\react-estudo\\\\estudo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Header from \"./Header\";\nimport FormTasks from \"./FormTasks\";\nimport TasksList from \"./TasksList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // array onde as tarefas são armazenadas\n  // aqui foi utilizado lifting state up, pois se eu colocasse o array das tarefas no componente FormTasks ou no TasksLists (que são irmãos) o fluxo de dados não aconteceria, pois só acontece entre pai-filho e não irmão-irmão\n  const [task, setTask] = useState([]);\n\n  // adicionando tarefas\n  function handleAddTask(item) {\n    setTask(items => [...items, item]);\n  }\n\n  // apagando tarefas\n  function handleDeleteTask(id) {\n    setTask(items => items.filter(item => item.id !== id));\n  }\n\n  // resentando tarefas\n  function handleResetTask() {\n    setTask([]);\n  }\n\n  // alternando o valor da propriedade completed da tarefa quando o checkbox é alterado\n  function ToggleCompletedTask(id) {\n    setTask(items => items.map(item => item.id === id ? {\n      ...item,\n      completed: !item.completed\n    } : item));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormTasks, {\n      task: task,\n      setTask: setTask,\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TasksList, {\n      task: task,\n      onDeleteTask: handleDeleteTask,\n      onResetTask: handleResetTask,\n      onToggleCompletedTask: ToggleCompletedTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      task: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n// function Header() {\n//   return (\n//     <>\n//       <h1 className=\"title\">To-Do List</h1>;\n//       <div className=\"custom-shape-divider-top-1714657111\">\n//         <svg\n//           data-name=\"Layer 1\"\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           viewBox=\"0 0 1200 120\"\n//           preserveAspectRatio=\"none\"\n//         >\n//           <path\n//             d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\"\n//             className=\"shape-fill\"\n//           ></path>\n//         </svg>\n//       </div>\n//     </>\n//   );\n// }\n\n// function FormTasks({ onAddTask }) {\n//   const [inputTask, setInputTask] = useState(\"\");\n\n//   function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (!inputTask) return;\n\n//     const newTask = { id: Date.now(), task: inputTask, completed: false };\n\n//     onAddTask(newTask);\n\n//     setInputTask(\"\");\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>Digite a tarefa a ser executada</label>\n//       <input\n//         type=\"text\"\n//         value={inputTask}\n//         onChange={(e) => setInputTask(e.target.value)}\n//       />\n//       <button className=\"btn-add\">Adicionar</button>\n//     </form>\n//   );\n// }\n\n// function TasksList({ task, onDeleteTask, onResetTask, onToggleCompletedTask }) {\n//   let tarefas;\n//   const [order, setOrder] = useState(\"\");\n\n//   if (order === \"default\" || order === \"\") {\n//     tarefas = task;\n//   }\n\n//   // Essas ordenações foram feitas com ajuda do GPT\n//   if (order === \"tasksComplete\") {\n//     tarefas = task\n//       .slice()\n//       .sort((a, b) => Number(a.completed) - Number(b.completed));\n//   }\n\n//   if (order === \"alphabeticalOrder\") {\n//     tarefas = task.slice().sort((a, b) => a.task.localeCompare(b.task));\n//   }\n\n//   return (\n//     <>\n//       <ul>\n//         {tarefas.map((item, i) => (\n//           <Tasks\n//             item={item}\n//             key={item.id}\n//             onClick={onDeleteTask}\n//             onToggle={onToggleCompletedTask}\n//           />\n//         ))}\n//       </ul>\n//       {tarefas.length > 0 && (\n//         <div className=\"task-options\">\n//           <select value={order} onChange={(e) => setOrder(e.target.value)}>\n//             <option disabled value=\"\" hidden>\n//               Como você quer ordenar as tarefas?\n//             </option>\n//             <option value=\"default\">Ordem de entrada (padrão)</option>\n//             <option value=\"tasksComplete\">Tarefas Completas</option>\n//             <option value=\"alphabeticalOrder\">Ordem Alfabética</option>\n//           </select>\n//           <button className=\"btn-reset\" onClick={onResetTask}>\n//             Reset\n//           </button>\n//         </div>\n//       )}\n//     </>\n//   );\n// }\n\n// function Tasks({ item, onClick, onToggle }) {\n//   return (\n//     <li>\n//       <input\n//         className=\"checkbox\"\n//         type=\"checkbox\"\n//         value={item.completed}\n//         onChange={() => onToggle(item.id)}\n//       />\n//       <span className={`task ${item.completed ? \"completed\" : \"\"}`}>\n//         {item.task}\n//       </span>\n//       <button className=\"btn-lixeira\" onClick={() => onClick(item.id)}>\n//         <img src={lixeira} alt=\"Lixeira\" />\n//       </button>\n//     </li>\n//   );\n// }\n\n// function Footer({ task }) {\n//   const lengthTask = task.length;\n//   const lengthTaskCompleted = task.filter(\n//     (item) => item.completed === true\n//   ).length;\n//   const percentageTaskCompleted = Number(\n//     ((lengthTaskCompleted / lengthTask) * 100).toFixed(2)\n//   );\n//   //   console.log(percentageTaskCompleted);\n\n//   if (lengthTask === 0) {\n//     return <footer>Você ainda não adicionou nenhuma tarefa</footer>;\n//   }\n\n//   return percentageTaskCompleted === 100 ? (\n//     <footer>Você concluiu toda(s) as {lengthTask} tarefa(s). Parabens!</footer>\n//   ) : (\n//     <footer>\n//       Você tem {lengthTask} tarefa(s) e {lengthTaskCompleted} (\n//       {percentageTaskCompleted}%) já foram concluída(s)\n//     </footer>\n//   );\n// }\n_s(App, \"e4fANLrMNZRK3DN5tkGMV7bVkUU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","FormTasks","TasksList","jsxDEV","_jsxDEV","App","_s","task","setTask","handleAddTask","item","items","handleDeleteTask","id","filter","handleResetTask","ToggleCompletedTask","map","completed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onDeleteTask","onResetTask","onToggleCompletedTask","Footer","_c","$RefreshReg$"],"sources":["C:/Users/Leonardo/Desktop/react-estudo/estudo/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Header from \"./Header\";\nimport FormTasks from \"./FormTasks\";\nimport TasksList from \"./TasksList\";\n\nexport default function App() {\n  // array onde as tarefas são armazenadas\n  // aqui foi utilizado lifting state up, pois se eu colocasse o array das tarefas no componente FormTasks ou no TasksLists (que são irmãos) o fluxo de dados não aconteceria, pois só acontece entre pai-filho e não irmão-irmão\n  const [task, setTask] = useState([]);\n\n  // adicionando tarefas\n  function handleAddTask(item) {\n    setTask((items) => [...items, item]);\n  }\n\n  // apagando tarefas\n  function handleDeleteTask(id) {\n    setTask((items) => items.filter((item) => item.id !== id));\n  }\n\n  // resentando tarefas\n  function handleResetTask() {\n    setTask([]);\n  }\n\n  // alternando o valor da propriedade completed da tarefa quando o checkbox é alterado\n  function ToggleCompletedTask(id) {\n    setTask((items) =>\n      items.map((item) =>\n        item.id === id ? { ...item, completed: !item.completed } : item\n      )\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <FormTasks task={task} setTask={setTask} onAddTask={handleAddTask} />\n      <TasksList\n        task={task}\n        onDeleteTask={handleDeleteTask}\n        onResetTask={handleResetTask}\n        onToggleCompletedTask={ToggleCompletedTask}\n      />\n      <Footer task={task} />\n    </div>\n  );\n}\n\n// function Header() {\n//   return (\n//     <>\n//       <h1 className=\"title\">To-Do List</h1>;\n//       <div className=\"custom-shape-divider-top-1714657111\">\n//         <svg\n//           data-name=\"Layer 1\"\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           viewBox=\"0 0 1200 120\"\n//           preserveAspectRatio=\"none\"\n//         >\n//           <path\n//             d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\"\n//             className=\"shape-fill\"\n//           ></path>\n//         </svg>\n//       </div>\n//     </>\n//   );\n// }\n\n// function FormTasks({ onAddTask }) {\n//   const [inputTask, setInputTask] = useState(\"\");\n\n//   function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (!inputTask) return;\n\n//     const newTask = { id: Date.now(), task: inputTask, completed: false };\n\n//     onAddTask(newTask);\n\n//     setInputTask(\"\");\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>Digite a tarefa a ser executada</label>\n//       <input\n//         type=\"text\"\n//         value={inputTask}\n//         onChange={(e) => setInputTask(e.target.value)}\n//       />\n//       <button className=\"btn-add\">Adicionar</button>\n//     </form>\n//   );\n// }\n\n// function TasksList({ task, onDeleteTask, onResetTask, onToggleCompletedTask }) {\n//   let tarefas;\n//   const [order, setOrder] = useState(\"\");\n\n//   if (order === \"default\" || order === \"\") {\n//     tarefas = task;\n//   }\n\n//   // Essas ordenações foram feitas com ajuda do GPT\n//   if (order === \"tasksComplete\") {\n//     tarefas = task\n//       .slice()\n//       .sort((a, b) => Number(a.completed) - Number(b.completed));\n//   }\n\n//   if (order === \"alphabeticalOrder\") {\n//     tarefas = task.slice().sort((a, b) => a.task.localeCompare(b.task));\n//   }\n\n//   return (\n//     <>\n//       <ul>\n//         {tarefas.map((item, i) => (\n//           <Tasks\n//             item={item}\n//             key={item.id}\n//             onClick={onDeleteTask}\n//             onToggle={onToggleCompletedTask}\n//           />\n//         ))}\n//       </ul>\n//       {tarefas.length > 0 && (\n//         <div className=\"task-options\">\n//           <select value={order} onChange={(e) => setOrder(e.target.value)}>\n//             <option disabled value=\"\" hidden>\n//               Como você quer ordenar as tarefas?\n//             </option>\n//             <option value=\"default\">Ordem de entrada (padrão)</option>\n//             <option value=\"tasksComplete\">Tarefas Completas</option>\n//             <option value=\"alphabeticalOrder\">Ordem Alfabética</option>\n//           </select>\n//           <button className=\"btn-reset\" onClick={onResetTask}>\n//             Reset\n//           </button>\n//         </div>\n//       )}\n//     </>\n//   );\n// }\n\n// function Tasks({ item, onClick, onToggle }) {\n//   return (\n//     <li>\n//       <input\n//         className=\"checkbox\"\n//         type=\"checkbox\"\n//         value={item.completed}\n//         onChange={() => onToggle(item.id)}\n//       />\n//       <span className={`task ${item.completed ? \"completed\" : \"\"}`}>\n//         {item.task}\n//       </span>\n//       <button className=\"btn-lixeira\" onClick={() => onClick(item.id)}>\n//         <img src={lixeira} alt=\"Lixeira\" />\n//       </button>\n//     </li>\n//   );\n// }\n\n// function Footer({ task }) {\n//   const lengthTask = task.length;\n//   const lengthTaskCompleted = task.filter(\n//     (item) => item.completed === true\n//   ).length;\n//   const percentageTaskCompleted = Number(\n//     ((lengthTaskCompleted / lengthTask) * 100).toFixed(2)\n//   );\n//   //   console.log(percentageTaskCompleted);\n\n//   if (lengthTask === 0) {\n//     return <footer>Você ainda não adicionou nenhuma tarefa</footer>;\n//   }\n\n//   return percentageTaskCompleted === 100 ? (\n//     <footer>Você concluiu toda(s) as {lengthTask} tarefa(s). Parabens!</footer>\n//   ) : (\n//     <footer>\n//       Você tem {lengthTask} tarefa(s) e {lengthTaskCompleted} (\n//       {percentageTaskCompleted}%) já foram concluída(s)\n//     </footer>\n//   );\n// }\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,SAASU,aAAaA,CAACC,IAAI,EAAE;IAC3BF,OAAO,CAAEG,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAED,IAAI,CAAC,CAAC;EACtC;;EAEA;EACA,SAASE,gBAAgBA,CAACC,EAAE,EAAE;IAC5BL,OAAO,CAAEG,KAAK,IAAKA,KAAK,CAACG,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5D;;EAEA;EACA,SAASE,eAAeA,CAAA,EAAG;IACzBP,OAAO,CAAC,EAAE,CAAC;EACb;;EAEA;EACA,SAASQ,mBAAmBA,CAACH,EAAE,EAAE;IAC/BL,OAAO,CAAEG,KAAK,IACZA,KAAK,CAACM,GAAG,CAAEP,IAAI,IACbA,IAAI,CAACG,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGH,IAAI;MAAEQ,SAAS,EAAE,CAACR,IAAI,CAACQ;IAAU,CAAC,GAAGR,IAC7D,CACF,CAAC;EACH;EAEA,oBACEN,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACH,SAAS;MAACM,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA,OAAQ;MAACiB,SAAS,EAAEhB;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrEpB,OAAA,CAACF,SAAS;MACRK,IAAI,EAAEA,IAAK;MACXmB,YAAY,EAAEd,gBAAiB;MAC/Be,WAAW,EAAEZ,eAAgB;MAC7Ba,qBAAqB,EAAEZ;IAAoB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFpB,OAAA,CAACyB,MAAM;MAACtB,IAAI,EAAEA;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAlB,EAAA,CAxLwBD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}