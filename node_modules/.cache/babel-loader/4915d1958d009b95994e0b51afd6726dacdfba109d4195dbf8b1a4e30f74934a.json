{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1091392413016\\\\Desktop\\\\to-do-list-reactJS\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Header from \"./Header\";\nimport FormTasks from \"./FormTasks\";\nimport TasksList from \"./TasksList\";\nimport Footer from \"./Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // array onde as tarefas são armazenadas\n  // aqui foi utilizado lifting state up, pois se eu colocasse o array das tarefas no componente FormTasks ou no TasksLists (que são irmãos) o fluxo de dados não aconteceria, pois só acontece entre pai-filho e não irmão-irmão\n  const [task, setTask] = useState([]);\n\n  // adicionando tarefas\n  function handleAddTask(item) {\n    setTask(items => [...items, item]);\n  }\n\n  // apagando tarefas\n  function handleDeleteTask(id) {\n    setTask(items => items.filter(item => item.id !== id));\n  }\n\n  // resentando tarefas\n  function handleResetTask() {\n    setTask([]);\n  }\n\n  // alternando o valor da propriedade completed da tarefa quando o checkbox é alterado\n  function ToggleCompletedTask(id) {\n    setTask(items => items.map(item => item.id === id ? {\n      ...item,\n      completed: !item.completed\n    } : item));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormTasks, {\n      task: task,\n      setTask: setTask,\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TasksList, {\n      task: task,\n      onDeleteTask: handleDeleteTask,\n      onResetTask: handleResetTask,\n      onToggleCompletedTask: ToggleCompletedTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      task: task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n// function Header() {\n//   return (\n//     <>\n//       <h1 className=\"title\">To-Do List</h1>;\n//       <div className=\"custom-shape-divider-top-1714657111\">\n//         <svg\n//           data-name=\"Layer 1\"\n//           xmlns=\"http://www.w3.org/2000/svg\"\n//           viewBox=\"0 0 1200 120\"\n//           preserveAspectRatio=\"none\"\n//         >\n//           <path\n//             d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\"\n//             className=\"shape-fill\"\n//           ></path>\n//         </svg>\n//       </div>\n//     </>\n//   );\n// }\n\n// function FormTasks({ onAddTask }) {\n//   const [inputTask, setInputTask] = useState(\"\");\n\n//   function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (!inputTask) return;\n\n//     const newTask = { id: Date.now(), task: inputTask, completed: false };\n\n//     onAddTask(newTask);\n\n//     setInputTask(\"\");\n//   }\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>Digite a tarefa a ser executada</label>\n//       <input\n//         type=\"text\"\n//         value={inputTask}\n//         onChange={(e) => setInputTask(e.target.value)}\n//       />\n//       <button className=\"btn-add\">Adicionar</button>\n//     </form>\n//   );\n// }\n\n// function TasksList({ task, onDeleteTask, onResetTask, onToggleCompletedTask }) {\n//   let tarefas;\n//   const [order, setOrder] = useState(\"\");\n\n//   if (order === \"default\" || order === \"\") {\n//     tarefas = task;\n//   }\n\n//   // Essas ordenações foram feitas com ajuda do GPT\n//   if (order === \"tasksComplete\") {\n//     tarefas = task\n//       .slice()\n//       .sort((a, b) => Number(a.completed) - Number(b.completed));\n//   }\n\n//   if (order === \"alphabeticalOrder\") {\n//     tarefas = task.slice().sort((a, b) => a.task.localeCompare(b.task));\n//   }\n\n//   return (\n//     <>\n//       <ul>\n//         {tarefas.map((item, i) => (\n//           <Tasks\n//             item={item}\n//             key={item.id}\n//             onClick={onDeleteTask}\n//             onToggle={onToggleCompletedTask}\n//           />\n//         ))}\n//       </ul>\n//       {tarefas.length > 0 && (\n//         <div className=\"task-options\">\n//           <select value={order} onChange={(e) => setOrder(e.target.value)}>\n//             <option disabled value=\"\" hidden>\n//               Como você quer ordenar as tarefas?\n//             </option>\n//             <option value=\"default\">Ordem de entrada (padrão)</option>\n//             <option value=\"tasksComplete\">Tarefas Completas</option>\n//             <option value=\"alphabeticalOrder\">Ordem Alfabética</option>\n//           </select>\n//           <button className=\"btn-reset\" onClick={onResetTask}>\n//             Reset\n//           </button>\n//         </div>\n//       )}\n//     </>\n//   );\n// }\n\n// function Tasks({ item, onClick, onToggle }) {\n//   return (\n//     <li>\n//       <input\n//         className=\"checkbox\"\n//         type=\"checkbox\"\n//         value={item.completed}\n//         onChange={() => onToggle(item.id)}\n//       />\n//       <span className={`task ${item.completed ? \"completed\" : \"\"}`}>\n//         {item.task}\n//       </span>\n//       <button className=\"btn-lixeira\" onClick={() => onClick(item.id)}>\n//         <img src={lixeira} alt=\"Lixeira\" />\n//       </button>\n//     </li>\n//   );\n// }\n\n// function Footer({ task }) {\n//   const lengthTask = task.length;\n//   const lengthTaskCompleted = task.filter(\n//     (item) => item.completed === true\n//   ).length;\n//   const percentageTaskCompleted = Number(\n//     ((lengthTaskCompleted / lengthTask) * 100).toFixed(2)\n//   );\n//   //   console.log(percentageTaskCompleted);\n\n//   if (lengthTask === 0) {\n//     return <footer>Você ainda não adicionou nenhuma tarefa</footer>;\n//   }\n\n//   return percentageTaskCompleted === 100 ? (\n//     <footer>Você concluiu toda(s) as {lengthTask} tarefa(s). Parabens!</footer>\n//   ) : (\n//     <footer>\n//       Você tem {lengthTask} tarefa(s) e {lengthTaskCompleted} (\n//       {percentageTaskCompleted}%) já foram concluída(s)\n//     </footer>\n//   );\n// }\n_s(App, \"e4fANLrMNZRK3DN5tkGMV7bVkUU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","FormTasks","TasksList","Footer","jsxDEV","_jsxDEV","App","_s","task","setTask","handleAddTask","item","items","handleDeleteTask","id","filter","handleResetTask","ToggleCompletedTask","map","completed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddTask","onDeleteTask","onResetTask","onToggleCompletedTask","_c","$RefreshReg$"],"sources":["C:/Users/1091392413016/Desktop/to-do-list-reactJS/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport FormTasks from \"./FormTasks\";\r\nimport TasksList from \"./TasksList\";\r\nimport Footer from \"./Footer\";\r\n\r\nexport default function App() {\r\n  // array onde as tarefas são armazenadas\r\n  // aqui foi utilizado lifting state up, pois se eu colocasse o array das tarefas no componente FormTasks ou no TasksLists (que são irmãos) o fluxo de dados não aconteceria, pois só acontece entre pai-filho e não irmão-irmão\r\n  const [task, setTask] = useState([]);\r\n\r\n  // adicionando tarefas\r\n  function handleAddTask(item) {\r\n    setTask((items) => [...items, item]);\r\n  }\r\n\r\n  // apagando tarefas\r\n  function handleDeleteTask(id) {\r\n    setTask((items) => items.filter((item) => item.id !== id));\r\n  }\r\n\r\n  // resentando tarefas\r\n  function handleResetTask() {\r\n    setTask([]);\r\n  }\r\n\r\n  // alternando o valor da propriedade completed da tarefa quando o checkbox é alterado\r\n  function ToggleCompletedTask(id) {\r\n    setTask((items) =>\r\n      items.map((item) =>\r\n        item.id === id ? { ...item, completed: !item.completed } : item\r\n      )\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <FormTasks task={task} setTask={setTask} onAddTask={handleAddTask} />\r\n      <TasksList\r\n        task={task}\r\n        onDeleteTask={handleDeleteTask}\r\n        onResetTask={handleResetTask}\r\n        onToggleCompletedTask={ToggleCompletedTask}\r\n      />\r\n      <Footer task={task} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// function Header() {\r\n//   return (\r\n//     <>\r\n//       <h1 className=\"title\">To-Do List</h1>;\r\n//       <div className=\"custom-shape-divider-top-1714657111\">\r\n//         <svg\r\n//           data-name=\"Layer 1\"\r\n//           xmlns=\"http://www.w3.org/2000/svg\"\r\n//           viewBox=\"0 0 1200 120\"\r\n//           preserveAspectRatio=\"none\"\r\n//         >\r\n//           <path\r\n//             d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\"\r\n//             className=\"shape-fill\"\r\n//           ></path>\r\n//         </svg>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// function FormTasks({ onAddTask }) {\r\n//   const [inputTask, setInputTask] = useState(\"\");\r\n\r\n//   function handleSubmit(e) {\r\n//     e.preventDefault();\r\n\r\n//     if (!inputTask) return;\r\n\r\n//     const newTask = { id: Date.now(), task: inputTask, completed: false };\r\n\r\n//     onAddTask(newTask);\r\n\r\n//     setInputTask(\"\");\r\n//   }\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label>Digite a tarefa a ser executada</label>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={inputTask}\r\n//         onChange={(e) => setInputTask(e.target.value)}\r\n//       />\r\n//       <button className=\"btn-add\">Adicionar</button>\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n// function TasksList({ task, onDeleteTask, onResetTask, onToggleCompletedTask }) {\r\n//   let tarefas;\r\n//   const [order, setOrder] = useState(\"\");\r\n\r\n//   if (order === \"default\" || order === \"\") {\r\n//     tarefas = task;\r\n//   }\r\n\r\n//   // Essas ordenações foram feitas com ajuda do GPT\r\n//   if (order === \"tasksComplete\") {\r\n//     tarefas = task\r\n//       .slice()\r\n//       .sort((a, b) => Number(a.completed) - Number(b.completed));\r\n//   }\r\n\r\n//   if (order === \"alphabeticalOrder\") {\r\n//     tarefas = task.slice().sort((a, b) => a.task.localeCompare(b.task));\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <ul>\r\n//         {tarefas.map((item, i) => (\r\n//           <Tasks\r\n//             item={item}\r\n//             key={item.id}\r\n//             onClick={onDeleteTask}\r\n//             onToggle={onToggleCompletedTask}\r\n//           />\r\n//         ))}\r\n//       </ul>\r\n//       {tarefas.length > 0 && (\r\n//         <div className=\"task-options\">\r\n//           <select value={order} onChange={(e) => setOrder(e.target.value)}>\r\n//             <option disabled value=\"\" hidden>\r\n//               Como você quer ordenar as tarefas?\r\n//             </option>\r\n//             <option value=\"default\">Ordem de entrada (padrão)</option>\r\n//             <option value=\"tasksComplete\">Tarefas Completas</option>\r\n//             <option value=\"alphabeticalOrder\">Ordem Alfabética</option>\r\n//           </select>\r\n//           <button className=\"btn-reset\" onClick={onResetTask}>\r\n//             Reset\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// function Tasks({ item, onClick, onToggle }) {\r\n//   return (\r\n//     <li>\r\n//       <input\r\n//         className=\"checkbox\"\r\n//         type=\"checkbox\"\r\n//         value={item.completed}\r\n//         onChange={() => onToggle(item.id)}\r\n//       />\r\n//       <span className={`task ${item.completed ? \"completed\" : \"\"}`}>\r\n//         {item.task}\r\n//       </span>\r\n//       <button className=\"btn-lixeira\" onClick={() => onClick(item.id)}>\r\n//         <img src={lixeira} alt=\"Lixeira\" />\r\n//       </button>\r\n//     </li>\r\n//   );\r\n// }\r\n\r\n// function Footer({ task }) {\r\n//   const lengthTask = task.length;\r\n//   const lengthTaskCompleted = task.filter(\r\n//     (item) => item.completed === true\r\n//   ).length;\r\n//   const percentageTaskCompleted = Number(\r\n//     ((lengthTaskCompleted / lengthTask) * 100).toFixed(2)\r\n//   );\r\n//   //   console.log(percentageTaskCompleted);\r\n\r\n//   if (lengthTask === 0) {\r\n//     return <footer>Você ainda não adicionou nenhuma tarefa</footer>;\r\n//   }\r\n\r\n//   return percentageTaskCompleted === 100 ? (\r\n//     <footer>Você concluiu toda(s) as {lengthTask} tarefa(s). Parabens!</footer>\r\n//   ) : (\r\n//     <footer>\r\n//       Você tem {lengthTask} tarefa(s) e {lengthTaskCompleted} (\r\n//       {percentageTaskCompleted}%) já foram concluída(s)\r\n//     </footer>\r\n//   );\r\n// }\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,SAASW,aAAaA,CAACC,IAAI,EAAE;IAC3BF,OAAO,CAAEG,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAED,IAAI,CAAC,CAAC;EACtC;;EAEA;EACA,SAASE,gBAAgBA,CAACC,EAAE,EAAE;IAC5BL,OAAO,CAAEG,KAAK,IAAKA,KAAK,CAACG,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5D;;EAEA;EACA,SAASE,eAAeA,CAAA,EAAG;IACzBP,OAAO,CAAC,EAAE,CAAC;EACb;;EAEA;EACA,SAASQ,mBAAmBA,CAACH,EAAE,EAAE;IAC/BL,OAAO,CAAEG,KAAK,IACZA,KAAK,CAACM,GAAG,CAAEP,IAAI,IACbA,IAAI,CAACG,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGH,IAAI;MAAEQ,SAAS,EAAE,CAACR,IAAI,CAACQ;IAAU,CAAC,GAAGR,IAC7D,CACF,CAAC;EACH;EAEA,oBACEN,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA,CAACL,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACJ,SAAS;MAACO,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA,OAAQ;MAACiB,SAAS,EAAEhB;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrEpB,OAAA,CAACH,SAAS;MACRM,IAAI,EAAEA,IAAK;MACXmB,YAAY,EAAEd,gBAAiB;MAC/Be,WAAW,EAAEZ,eAAgB;MAC7Ba,qBAAqB,EAAEZ;IAAoB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFpB,OAAA,CAACF,MAAM;MAACK,IAAI,EAAEA;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAlB,EAAA,CAxLwBD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}